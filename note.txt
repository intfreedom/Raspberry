/*
* 这几天就是全力学习，学一个东西累了，就是学其他的，然后，
* 1.看看硬件原理图
* 2.计算机基础知识；
* ROM与RAM的区别；这与哈弗结构，Instruction Memory与Data Memory;
* 明天看看Linux驱动开发，bootloader,内核裁剪等；
*/

/*
* 简历上提到，IO点灯，灯的闪烁不同；IO programming;IO output;
* IO端口的灌电流能力高于拉电流能力(低电平点亮LED);
* IO output;;;
* CPU执行运算能力强，时钟，配置引脚；复位时选择时钟输入源；
* 总线接口访问存储器/外设；Digital I/O programming;IO output; Noisy signals Bouncing; Button pressed Button refeased;
* sampling;Digital I/O pins: sampling; Switching;
*/

/*
* 初始化，将微控制器内部电路；
* 上电复位，电源丢失复位，外部产生的；时钟的驱动，有序的进行；
* 时钟频率高，意味着CPU执行运算的能力强；
* 看门狗，定时器，异步通信等都依赖稳定的时钟；
* 时钟通常由外部晶体或振荡器提供，使用外部的配置引脚在复位时选择时钟输入源；
* 片内，片外，内部总线接口，CPU通过内部总线接口访问存储器/外设；
* CPU，总线设备(存储器/外设)必须具有一个确定的地址范围；
* 数据总线；
* 外设是为特定的控制应用而设计的；
* 输入输出：DIO，ECT， PWM；模拟量处理：AD，DA；
* 通信处理：SCI,SPI,I2C,HDLC,
* 单片机编程的精髓在于存储器的使用；
* 最基本的手段；通常在微控制器中，将8/16/32个IO口合成一组；
* IO current limit, Voltage and current operating ratings;
* Symbol, Description Digital aupply voltage; Digital 
* 每一个模块都必须在GPIO control registers;
* GPIO模块也需要时钟；switch;按键，脉冲，提供多组触点；
* 各种形状，各种尺寸；
* Cortex-M的在线调试，OpenSDA；
* 编程，烧写器，
* 异步通讯；
* 同步通讯；
* 通讯设备，UART-Universal Async. Receiver Transmitter;
* 通用异步接收/发送装置(总称)；SCI-Serial Communication Interface;
* 编码：NRZ(not return zero)Encoding;
* 避免了异步时钟误差的积累；想一想？收发双方允许的波特率误差是多少？
* NRZ(not return zero)Ecoding;
* 奇偶校验，使得总的1的个数是偶数；使得总的1的个数是奇数；
* 微嵌入式系统，ARM，UART寄存器；异步串行通讯UART；
*/

/*
* C is much more flexible and free-wheeling than other high-level
* programming languages: C is a structured language
*/

/*
* 32bit MCU Register file(ARM Cortex M)
* xPSR Program status registers
* 1.1APSR访问的是高四位；1.2IPSR访问的底四位；
*/

/*
* ARMv1-ARMv8等是结构体系版本(Architecture);向下兼容；
* ARM6，ARM8，Cortex-A是具体的产品型号；从ARMv7开始，型号称为Cortex-A,Cortex-R,Cortex-M;
* ARM MCU/MPU from Freescale;
* 堆，栈空间和变量空间是使用同一端存储器空间；RS-200M-Cortex-R;arm;MCU;
*/

/*
* 程序状态寄存器，Program Status Register;
* 条件状态寄存器，CCR(Condition Code Register);
* 操作数；
* 堆栈顶端位置通过CPU内的堆栈指针寄存器确定；SP；
* LR，指令都是偶数(两位，或四位)，最低位，1是告诉thumb指令集，0是ARM指令集；
* 使用的时候最低位不用，直接取高位部分，最后一位置0；
* 
*/

/*
* 集成开发环境，ISIS；
*/

/*
* 一个端口;
* LPC2000系列ARM硬件结构；
* 功能选择寄存器，PINSEL0对应GPIO，PINSEL1对应TXDO，PINSEL2对应PWM1输出；
* PINSEL寄存器中，有两个位控制，(00->0, 01->1, 10->2);
* 功能选择为IO，PINSEL0[1..0] = 00表示GPIO
* 引脚作为输出，GPIO,TXDO,PWM1输出；
* 引脚P0.0/TXD0/MAT3.1......P0.31;ARM是32位的，对应一个P0端口；
* IO0DIR对应P0;IO0DIR[0]对应P0.0；IO0DIR[0]=1控制引脚高低电平；
* 引脚状态寄存器(IOxPIN)，IOxPIN[0]对应Px.0;
* 对比之下，51单片机从P0.0-P0.7；
*/

/*
* 微控制器(MCU)与嵌入式系统(Eembedded System)
*/

/*
* WiKipedia;
*/

/*
* 共阴极，高电平点亮，共阳极，低电平点亮；
* CPU管脚复用，点LED等是使用GPIO中的输入输出功能；
* 例如STM32参考手册；
* STM32_GPIO寄存器:两个32位的配置寄存器GPIOx->CRL,GPIOx->CRH;
* 编程目的操作硬件，硬件分布在地址上，硬件把地址-寄存器；
* 某个寄存器管理PA0-PA4(PortA)；GPIOA_CRL([4:19])对应PA1-PA4;
* 一个寄存器的4位对应一个PA端口的一个引脚，32位的GPIOA_CRL对应PA0-PA7；
* GPIOA_CRL是端口配置低寄存器：在通用推挽输出；[4:19]=0011 0011 0011 0011；//配置PA1-PA4为通用推挽输出；
* 让外设工作的是电流，电压让电流产生；
*/

/*
* I2C的接口，读I方C;
* 推荐一本书，the art of electronics(3th)，2015年；
* analog circuits world class designs；模拟电路设计；
* 没有最好，只有最合适；
* 阅读官方文档；
* ARM Cortex-M0权威指南；
* 推荐，<<C语言深度解剖，解开程序员面试笔试的秘密>>
* arm keil可以编辑C，烧录到STM32的板子上；
* secureCRT烧写系统；
* sourceInsight对比vscode;
* 韦东山，Linux开发完全手册；
* make gconfig配置内核，N不编译进内核，M以模块形式；
*/

/*
* 用ARM开发板和步进电机开发；https://wenku.baidu.com/view/9baf1f35168884868662d606.html
就那个注射器的实验。
*/

1.自动注射的项目；
https://github.com/pachterlab/poseidon
2.1一个易于使用，高度可定制的开源注射器泵和显微镜系统。
2.1.1该软件配置为以1/32微步进的速度每转200步运行步进电机，即每转6400步。microstepping微步；
要进行配置，必须在Arduino CNC防护板的M0，M1和M2引脚之间添加3个跳线。
有关微步进的更多信息，请参见CNC屏蔽使用的DRV8825步进电机驱动器的产品页面。
2.1.2
2.1.3
